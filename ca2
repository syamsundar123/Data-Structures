import math 
  

def p_smooth(n, p) : 
    Max = -10
    
    while (not(n % 2)):  
        Max = max(Max, 2) 
        n = int(n//2) 
      
 
    for i in range(3,int(math.sqrt(n)), 2): 
        
        while (n % i == 0) : 
           
            Max = max(Max,i)  
            n = int(n // i) 
           
    if (n > 2): 
        Max = max(Max, n) 
      
    return (Max <= p) 
def generate_prime_factors(n):
    counter = 0
    d = []
    while n%2 == 0:
        counter = 1
        n = n//2
    for i in range(3,int(math.sqrt(n)),2):
        
        while n%i == 0:
            if i not in d:
                counter += 1
            n = n//i
    if n > 2:
        counter += 1
    
    return counter
    
def fun(arr,n,ps):
    maximum = -2
    h = []
    p = []
    p_length = 0
    for i in range(n):
        if p_smooth(arr[i],ps):
            h.append(arr[i])
    if len(h) != 0:
        for i in range(len(h)):
            c = generate_prime_factors(h[i])
            maximum = max(c,maximum)
            p.append(c)
            p_length += 1
            
        m = maximum
        k = 0
        for i in range(p_length):
            if p[i] == m:
                k = max(k,h[i])
        
        
        
        print(k)
    else:
        print(-1)
  


NP = list(map(int,input().split()))
N = NP[0]
P = NP[1]
arr = list(map(int,input().split()))
fun(arr,N,P)
